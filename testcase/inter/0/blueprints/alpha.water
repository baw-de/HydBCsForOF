/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  BAW-Blaupause                         |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      alpha.water;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField   uniform 1.;

/*
    Einlauf: Vorgegebener Volumenstrom und freie Luft-Wasserverteilung: flowRateWaterAlpha oder zeroGradient
    Einlauf: Vorgegebener Volumenstrom und feste Luft-Wasserverteilung: waterLevel_alpha_prgh
             ACHTUNG: Dies ist physikalisch oft nicht sinnvoll. Genau Ã¼berlegen!
    Einlauf: Vorgegebener Wasserstand: waterLevel_alpha_prgh, identisch zu Vorgabe in p_rgh
    Auslauf: Vorgegebener Wasserstand: waterLevel_alpha_prgh, identisch zu Vorgabe in p_rgh
    Wand: zeroGradient 

    Wenn unklar: zeroGradient

    ACHTUNG: Den "Deckel" wie vorgegebenen Wasserstand behandeln, wenn er offen sein soll (sonst als Wand)!
*/

boundaryField
{
    xmin
    {
        type flowRateWaterAlpha;      // Behaves like zeroGradient with additions to avoid bubbles or rain.
 
        // ADVANCED ENTRIES:
        // pressureThreshold  10000.; // For all boundary cells with pressure p above pressureThreshold alpha.water=1
        //                                         is prescribed. This avoids bubbles in the region with p>pressureThreshold.
        // sharpen              0.01; // Low values increase bubble risk, high values "bend" the water surface
        alphaLowerThreshold  0.001;   // Allow flow for cells with alpha.water < 0.001
        alphaUpperThreshold  0.999;   // Allow flow for cells with alpha.water > 0.999

        value           uniform 0.;
    }
    
    xmax
    {
        type            waterLevel_alpha_prgh;  // Behaves like zeroGradient at an outlet and like a Dirichlet-BC at an inlet.
        mode            singleValue;            // singleValue, ratingCurveTable, ratingCurveFunction or timeSeries  
        data            2.41;                   // set the water level directly or supply a table for functions

        // data     table  (
        //                (0   2.41)
        //                (100 2.41)
        //          );                          // table for dependency between Q and h  or between t and h   
        
        // OPTIONAL ENTRIES:
        // flowRateMultiplier    1.0;           // For "slice" models: Multiply Q with flowRateMultiplier before evaluating h 
        
        value uniform   1.;                     // Initial value for alpha
    }
    
    ymin
    {
        type            zeroGradient;
    }
    
    ymax
    {
        type            zeroGradient;
    }
    
    zmin
    {
        type            zeroGradient;
    }
    
    zmax
    {
        type            waterLevel_alpha_prgh;  // Behaves like zeroGradient at an outlet and like a Dirichlet-BC at an inlet.
        mode            singleValue;            // singleValue, ratingCurveTable or timeSeriesTable  
        data            2.41;                   // set the waterlevel directly or supply a table for functions
        value   uniform 1.;                     // Initial value for alpha
    }
    
    pfeiler
    {
        type            zeroGradient;
    }
    
    "sohle_.*"
    {
        type            zeroGradient;
    }
    
    // Wird nach Gitter-Manipulationen oft gebraucht!
    oldInternalFaces
    {
        type            zeroGradient;
    }
}

// ************************************************************************* //
