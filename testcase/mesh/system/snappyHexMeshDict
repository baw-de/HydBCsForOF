// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       true;

// Geometry. Definition of all surfaces.

// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface

geometry
{
    // Load geometry parts and assign names
    right_wall.stl                 {type triSurfaceMesh; name mywalls;}
    left_wall.stl                  {type triSurfaceMesh; name mywalls;}
    bottom.stl                     {type triSurfaceMesh; name bottom;}
    column.stl                     {type triSurfaceMesh; name column;}

    // Alternative: Generate a simple geometry part directly
    // column                         {type searchableBox; min (1.0 -5.0 8.0);   max (3.0 -3.0  11.0); name column;}

    // Used as an internal constraint to align the cell surfaces with the water surface    
    // water_surface.stl                     {type triSurfaceMesh; name water_surface;}

    // Refinement areas 
    basin         {type searchableBox; min (13   8   -9999);        max (45   50.0 6.00); name isotrop_level1;}
    outletchannel {type searchableBox; min (24  30   -9999);        max (40   35.0 6.00); name isotrop_level2;}
    walljet       {type searchableBox; min (25   5   -9999);        max (30   35.0 6.00); name isotrop_level2;}
    middlejet     {type searchableBox; min (15.8 16.5  -9999);      max (25   35.0 6.00); name isotrop_level2;}
    cornereddy    {type searchableBox; min (23   5   -9999);        max (30    9.0 6.00); name isotrop_level2;}
    sharpedgeA    {type searchableBox; min (13.5 9.  -9999);        max (18.5 12.5 6.00); name isotrop_level2;}
    sharpedgeB    {type searchableBox; min (29. 29.  -9999);        max (36.0 33.  6.00); name isotrop_level3;}
    columnFront   {type searchableBox; min (22. 18.  -9999);        max (28.0 20.  6.00); name isotrop_level3;}
    
    // Anisotropic refinement of the water. Must fit to other refinements at walls! 
    water_A  {type searchableBox; min (-9999  -9999 0.0);   max (9999 9999 6.);}  
    water_B  {type searchableBox; min (-9999  -9999 0.0);   max (9999 9999 6.);}  


};

// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // While refining maximum number of cells per processor. This is basically
    // the number of cells that fit on a processor. If you choose this too small
    // it will do just more refinement iterations to obtain a similar mesh.
    maxLocalCells 20000000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 200000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 0;

    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 3;

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance 0.10;

    features ();

    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~
    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.


    // Here ALL wall objects have to be listed (even if no refinement is required)
    refinementSurfaces
    {

        mywalls      {level (2 2);}   // Refine two times on the planes and three times at edges
        bottom       {level (2 2);}
        column       {level (2 3);}

        // Not a geometry. Forces cells to water surface.
        // water_surface  { faceZone FZws; level (1 1); faceType internal; }
    }

    // Resolve sharp angles
    resolveFeatureAngle 20;

    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
        // Generic refinements 
        isotrop_level1  {mode inside; levels ((1E99 1));}
        isotrop_level2  {mode inside; levels ((1E99 2));}
        isotrop_level3  {mode inside; levels ((1E99 3));}
        isotrop_level4  {mode inside; levels ((1E99 4));}

        // Specific refinements
        column   {mode distance; levels ((3. 2));}

        // Anisotropic refinemnt
        water_A {mode inside; levels ((1E15 0)); levelIncrement  (0 0 (0 0 2));} // if (0<=level<=0) then refine in z 2 times
        water_B {mode inside; levels ((1E15 0)); levelIncrement  (1 1 (0 0 1));} // if (1<=level<=1) then refine in z 1 times

    }
    
    // Mesh selection
    // ~~~~~~~~~~~~~~

    // The section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.

    // Find my domain: What is "inside"?
    locationInMesh (20. 6  6);

    // Leak search: If geometry is leaky, place this at a point that should be cut away
    locationsOutsideMesh (( 9999.  9999. 9999.));
    
    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces no;
}

// Settings for the snapping.
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence to surface
    nSmoothPatch 5; // "Smoothing iteration xx"

    // Optional: number of smoothing iterations for internal points on refinement interfaces. This will 
    // reduce non-orthogonality on refinement interfaces (0<nSmoothInternal<=nSmoothPatch).
    // nSmoothInternal 0;
    nSmoothInternal 5;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local maximum edge length.
    tolerance 2.0;   

    //- Number of feature edge snapping iterations.
    //  Leave out altogether to disable.
    nFeatureSnapIter 10; // "Morph iteration xx"

    //- Number of mesh displacement relaxation iterations to smooth the mesh in each "Morph iteration xx": "Smoothing displacement ..." "Iteration xxx"
    nSolveIter 10; // Number of smoothing steps within snapping. Defines also the width of mesh displacements from the boundary.

    //- Maximum number of snapping relaxation iterations in inital smoothing and morphing. Should stop before upon reaching a correct mesh.
    nRelaxIter 22; // Bis zu nRelaxIter+1 "Scaling iteration xx" innerhalb von "Smoothing iteration xx"
                   // Bis zu 2*nRelaxIter "Scaling iteration xx" innerhalb der "Morph iteration xx"

    // When to run face splitting (never at first iteration, always  at last iteration).
    // Is interval. Default -1 (disabled) Recommendation: set to half the number of feature snap iterations
    nFaceSplitInterval  5;

    //- Detect (geometric) features by sampling the surface (default=false)
    implicitFeatureSnap true;

    //- Use castellatedMeshControls::features (default = true)
    explicitFeatureSnap false;

    // Detect features between multiple surfaces (only for explicitFeatureSnap, default = false)
    multiRegionFeatureSnap true;

    // Angle at which the face is too concave and will be split. Default is 45 deg.
    concaveAngle 15;

    //- When splitting the minimum area ratio of faces. If face split
    //  causes ratio of area less than this do not split. Default is 0.3
    minAreaRatio 0.05;

}

// Settings for the layer addition.
addLayersControls
{
    // ###########################################################################################################
    // User settings
    // ###########################################################################################################

    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes true;
    // relativeSizes false;

    // Definition of near wall layers. Omitted here.
    layers
    {
//          mywalls     { nSurfaceLayers 3; firstLayerThickness 0.1; thickness 0.5; }
//          column      { nSurfaceLayers 3; firstLayerThickness 0.1; thickness 0.5; }
//          bottom      { nSurfaceLayers 3; firstLayerThickness 0.1; thickness 0.5; }
    }
  
    // Expansion factor for layer mesh
    expansionRatio 1.5;

    //- Wanted thickness of final added cell layer. If multiple layers
    //  is the thickness of the layer furthest away from the wall.
    //  Absolute or relative to undistorted size of cell outside layer.
    // finalLayerThickness 0.3; 

    // Wanted thickness of the layer next to the wall.
    // If relativeSizes this is relative to undistorted size of cell outside layer.
    firstLayerThickness 0.01;

    // Wanted overall thickness of layers.
    // If relativeSizes this is relative to undistorted size of cell outside layer.
    // thickness 0.05;

    //- Minimum thickness of cell layer. If for any reason layer
    //  cannot be above minThickness do not add layer.
    //  Absolute or relative to undistorted size of cell outside layer.
    minThickness 0.001;

    //- If points get not extruded do nGrow layers of connected faces that are
    //  also not grown. This helps convergence of the layer addition process
    //  close to features.
    nGrow 0;
    // nGrow -1; // to switch nGrow off when nOuterIter>1

    // ###########################################################################################################
    // Advanced settings
    // ###########################################################################################################

    // Static analysis of starting mesh

        // When not to extrude surface. 0 is flat surface, 90 is when two faces
        // are perpendicular. Note: was not working correctly < 1806
        featureAngle 60;

        // Defaults to featureAngle
        mergePatchFacesAngle  12.25435;
        
        // Defaults to defaultConcaveAngle
        concaveAngle  25;

        // When to merge patch faces. Default is featureAngle. Useful when
        // featureAngle is large.
        mergePatchFacesAngle 5.145; //  10;

        // Stop layer growth on highly warped cells
        // Smaller values help to create layers, but they are thinner then.
        maxFaceThicknessRatio 0.251234; 

    // Patch displacement

        // Number of smoothing iterations of surface normals before displacement
        //  "displacementMedialAxis : Iteration xxx "
        nSmoothSurfaceNormals 5;

        // Smooth layer thickness over surface patches
        nSmoothThickness 10; 

    // Choice of mesh shrinking algorithm

        // Optional mesh shrinking algorithm (default is displacementMedialAxis)
        // The displacementMotionSolver is a wrapper around the displacement
        // motion solvers. It needs specification of the solver to use and
        // its control dictionary.
        
        // How to compute the mesh shifting for layer intrusion
        meshShrinker   displacementMedialAxis; //  (default), displacementMotionSolver
        // meshShrinker   displacementMotionSolver ; // displacementMedialAxis (default), displacementMotionSolver
        
    // Parameters for displacementMotionSolver
    
        solver          displacementLaplacian;
        displacementLaplacianCoeffs
        {
         // diffusivity    uniform;
         // diffusivity    inverseDistance 1 (wall);  // Distortion very near to wall
           diffusivity    quadratic  inverseDistance 1 (wall);  // Distortion near wall
         // diffusivity    exponential 2.0 inverseDistance 1 (wall);
         // diffusivity    inverseVolume; // Large cells are "soft" in deformation
        }
        // Note that e.g. displacementLaplacian needs entries in fvSchemes, fvSolution. Also specify a minIter > 1 when    
        // solving cellDisplacement since otherwise solution might not be sufficiently accurate on points.

    // Parameters for medial axis analysis (for use with default displacementMedialAxis)

        // Angle used to pick up medial axis points
        // Note: changed(corrected) w.r.t 1.7.x! 90 degrees corresponds to 130
        // in 1.7.x.
        minMedialAxisAngle 90; 

        // Reduce layer growth where ratio thickness to medial distance is large
        maxThicknessToMedialRatio 0.25; 

        // Number of smoothing iterations of interior mesh movement direction
        nSmoothNormals 50;  //  "fieldSmoother : Smoothing normals in interior ..."
        
        // Optional: limit the number of steps [deformed cell layers] walking away from the surface.
        // Default is unlimited = 1000.
        // WARNING: Values smaller than the default might lead to extreme local mesh deformation!
        nMedialAxisIter 10;

        // Optional: smooth displacement after medial axis determination.
        // default is 0.
        nSmoothDisplacement 50;

        // (wip)Optional: do not extrude any point where
        //   (false) : all surrounding faces are not fully extruded
        //   (true)  : all surrounding points are not extruded
        // Default is false.
        // detectExtrusionIsland true;

        // Optional: do not extrude around sharp edges if both faces are not
        // fully extruded i.e. if one of the faces on either side would
        // become a wedge.
        // Default is 0.5*featureAngle. Set to -180 always attempt extrusion
        layerTerminationAngle 25;

        // Optional: disable shrinking of edges that have one (or two) points
        // on an extruded patch.
        // Default is false to enable single/two cell thick channels to still
        // have layers. In <=1806 this was true by default. On larger gaps it
        // should have no effect.
        //disableWallEdges true;

        // Optional: at non-patched sides allow mesh to slip if extrusion
        // direction makes angle larger than slipFeatureAngle. Default is
        // 0.5*featureAngle.
        slipFeatureAngle 30; 

        // Maximum number of snapping relaxation iterations inside each "nLayerIter" iteration. Should stop
        // before upon reaching a correct mesh.
        nRelaxIter 30; // 15;   // nRelaxIter Iterationen mit Skalierung, danach Nachfolgeiterationen mit Skalierung 0

    // Mesh shrinking

        // Create buffer region for new layer terminations, i.e. gradually
        // step down number of layers. Set to <0 to terminate layer in one go.
        nBufferCellsNoExtrude 0;

        // Overall max number of layer addition iterations. The mesher will exit if it reaches this number of iterations; 
        // possibly with an illegal mesh.
        nLayerIter 30; 

        // Max number of iterations after which relaxed meshQuality controls get used. Up to nRelaxedIter it uses the settings in
        // meshQualityControls, after nRelaxedIter it uses the values in meshQualityControls::relaxed.
        nRelaxedIter 0;   // Must be smaller than nLayerIter in order to use relaxed parameters

        // Overall number of outer layer of iterations. Default is 1 -> all
        // layers are added in one pass.
        // Fuer die iterative Layererstellung. nGrow=Anzahl der Layer
        nOuterIter 1;

    // Additional reporting: if there are just a few faces where there
    // are mesh errors (after adding the layers) print their face centres.
    // This helps in tracking down problematic mesh areas.
    additionalReporting true;

}

// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
  #include "meshQualityDict"
}

// Advanced

// Debug-Flags for optional output (can be added like a bitmask, e.g. 5=1+4)
// 0 : only write final meshes
// 1 : write intermediate meshes
// 2 : write volScalarField with cellLevel for postprocessing
// 4 : write current intersections as .obj files
debug 0;

// Additional debug output
//    mesh: write intermediate meshes
//    intersections: write current mesh intersections as .obj files
//    featureSeeds: write information about explicit feature edge refinement
//    attraction: write attraction as .obj files
//    layerInfo: write information about layers

debugFlags
(
 //    layerInfo
);

// Additional write output
//    mesh: write all mesh information
//    noRefinement: write mesh without refinement information (level0Edges, surfaceIndex)
//    scalarLevels: write volScalarField with cellLevel for post-processing
//    layerSets: write cellSets, faceSets of faces in layer
//    layerFields: write a volScalarField for layer coverage

writeFlags
(
    scalarLevels
    layerFields     
);


// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1.E-8;

// ************************************************************************* //






